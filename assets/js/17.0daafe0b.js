(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{265:function(t,e,a){"use strict";a.r(e);var s=a(28),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"event-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event-loop"}},[t._v("#")]),t._v(" Event-Loop")]),t._v(" "),a("p",[t._v("js是单线程的，为了防止主线程的阻塞，有同步和异步的操作。Event-Loop事件循环是解决javaScript单线程运行时不会阻塞的一种机制。")]),t._v(" "),a("h2",{attrs:{id:"单线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单线程"}},[t._v("#")]),t._v(" 单线程")]),t._v(" "),a("p",[t._v("只有一个线程，做一件事。js作为浏览器脚本语言，避免DOM渲染的冲突")]),t._v(" "),a("h2",{attrs:{id:"同步和异步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步和异步"}},[t._v("#")]),t._v(" 同步和异步")]),t._v(" "),a("ul",[a("li",[t._v("同步\n一个执行完以后才能继续执行下一个任务")]),t._v(" "),a("li",[t._v("异步")])]),t._v(" "),a("h2",{attrs:{id:"执行栈与任务队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行栈与任务队列"}},[t._v("#")]),t._v(" 执行栈与任务队列")]),t._v(" "),a("h2",{attrs:{id:"宏任务和微任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#宏任务和微任务"}},[t._v("#")]),t._v(" 宏任务和微任务")]),t._v(" "),a("p",[t._v("异步任务分为 宏任务(macrotask) 与 微任务 (microtask)。宏任务会进入一个队列，而微任务会进入到另一个不同的队列，且微任务要优于宏任务执行。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("宏任务")]),t._v(" "),a("p",[t._v("script、 setTimeout、setInterval、I/O、事件、postMessage、MessageChannel、setImmediate(Node.js)")])]),t._v(" "),a("li",[a("p",[t._v("微任务")]),t._v(" "),a("p",[t._v("promise.then()、MutationObserver、process.nextTick (Node.js)")])])]),t._v(" "),a("h2",{attrs:{id:"event-loop-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event-loop-2"}},[t._v("#")]),t._v(" Event Loop")]),t._v(" "),a("p",[t._v("事件循环中，每一次循环成为tick")])])}),[],!1,null,null,null);e.default=r.exports}}]);